"use strict";
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = require("fs-extra");
const checkUpdateAvailable_1 = require("./utils/checkUpdateAvailable");
/* process arguments */
commander_1.default.usage('[name]').name('bb components generate').parse(process.argv);
const { args } = commander_1.default;
if (args.length === 0) {
    commander_1.default.help();
}
const name = args[0];
// eslint-disable-next-line no-void
void (() => __awaiter(void 0, void 0, void 0, function* () {
    yield checkUpdateAvailable_1.checkUpdateAvailableCLI();
    if (!/^[a-z][a-z0-9]*$/i.test(name)) {
        throw Error(chalk_1.default.red(`\nName cannot contain special characters or spaces\n`));
    }
    if (yield fs_extra_1.pathExists(`src/prefabs/${name}.tsx`)) {
        throw Error(chalk_1.default.red(`\nPrefab ${name} already exists\n`));
    }
    if (yield fs_extra_1.pathExists(`src/components/${name}.js`)) {
        throw Error(chalk_1.default.red(`\nComponent ${name} already exists\n`));
    }
    const capitalisedName = name.charAt(0).toUpperCase() + name.slice(1);
    const prefab = `import { prefab, Icon } from '@betty-blocks/component-sdk';

import { ${capitalisedName} } from './structures/${capitalisedName}';

const attributes = {
  category: 'CONTENT',
  icon: Icon.TitleIcon,
  keywords: [''],
};

export default prefab('${capitalisedName}', attributes, undefined, [${capitalisedName}({})]);
`;
    const structureIndex = `import { component, PrefabReference } from '@betty-blocks/component-sdk';
import { Configuration } from '../Configuration';
import {
  ${name}Options as defaultOptions,
  categories as defaultCategories,
} from './options';

export const ${capitalisedName} = (
  config: Configuration,
  descendants: PrefabReference[] = [],
) => {
  const options = { ...(config.options || defaultOptions) };
  const style = { ...config.style };
  const ref = config.ref ? { ...config.ref } : undefined;
  const label = config.label ? config.label : undefined;
  const optionCategories = config.optionCategories
    ? { ...config.optionCategories }
    : defaultCategories;

  return component(
    '${capitalisedName}',
    { options, ref, style, label, optionCategories },
    descendants,
  );
};
`;
    const optionsIndex = `import { variable } from '@betty-blocks/component-sdk';
import { advanced } from '../../advanced';

export const categories = [
  {
    label: 'Advanced Options',
    expanded: false,
    members: ['dataComponentAttribute'],
  },
];

export const ${name}Options = {
  content: variable('Content', {
    value: ['Hello world'],
    configuration: { as: 'MULTILINE' },
  }),

  ...advanced('${capitalisedName}'),
};
`;
    const component = `(() => ({
  name: '${capitalisedName}',
  type: 'CONTENT_COMPONENT',
  allowedTypes: [],
  orientation: 'HORIZONTAL',
  jsx: (() => {
    const { useText } = B;
    const { content } = options;
    return <div className={classes.root}>{useText(content)}</div>;
  })(),
  styles: () => () => ({
    root: {},
  }),
}))();
`;
    yield Promise.all([
        fs_extra_1.outputFile(`src/prefabs/structures/${capitalisedName}/index.ts`, structureIndex),
        fs_extra_1.outputFile(`src/prefabs/structures/${capitalisedName}/options/index.ts`, optionsIndex),
        fs_extra_1.outputFile(`src/prefabs/${name}.tsx`, prefab),
        fs_extra_1.outputFile(`src/components/${name}.js`, component),
        console.log(chalk_1.default.green('The component has been generated')),
        console.log(chalk_1.default.blueBright("\nIf you would like to use the component in another prefab, \nwe recommend adding the import and export of the component structure to 'src/prefabs/structures/index.ts' for a clean import from the same file")),
    ]);
}))();
//# sourceMappingURL=bb-components-generate.js.map