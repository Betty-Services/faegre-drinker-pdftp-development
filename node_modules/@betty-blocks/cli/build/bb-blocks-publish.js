"use strict";
/* eslint-disable camelcase,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-argument */
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const commander_1 = __importDefault(require("commander"));
const prompts_1 = __importDefault(require("prompts"));
const adm_zip_1 = __importDefault(require("adm-zip"));
/* internal dependencies */
const blockDefinitions_1 = require("./blocks/blockDefinitions");
const functionDefinitions_1 = require("./functions/functionDefinitions");
const publishBlocks_1 = __importDefault(require("./blocks/publishBlocks"));
const config_1 = __importDefault(require("./functions/config"));
const validations_1 = require("./functions/validations");
commander_1.default.name('bb blocks publish').parse(process.argv);
const workingDir = process.cwd();
const baseBlocksPath = path_1.default.join(workingDir, 'blocks');
const blocks = blockDefinitions_1.blockDefinitions(baseBlocksPath);
const validateBlockConfig = (block) => !!block.functions.length;
const createBlockZip = (name, { functions, includes, dependencies }) => {
    const zip = new adm_zip_1.default();
    const tmpDir = '.tmp';
    const zipFilePath = path_1.default.join(tmpDir, `${name}.zip`);
    fs_extra_1.default.ensureDirSync(tmpDir);
    try {
        const functionsDir = path_1.default.join(workingDir, 'functions');
        const blocksDir = path_1.default.join(workingDir, 'blocks');
        const rootPackageJson = path_1.default.join(path_1.default.dirname(blocksDir), 'package.json');
        zip.addFile('package.json', Buffer.from(blockDefinitions_1.createPackageJson(name, rootPackageJson, dependencies)));
        zip.addFile('index.js', Buffer.from(functionDefinitions_1.generateIndex(functionsDir, functions)));
        const funcDefinitions = functionDefinitions_1.functionDefinitions(functionsDir);
        const blockFunctions = functionDefinitions_1.whitelistedFunctions(funcDefinitions, functions);
        blockFunctions.forEach((blockFunction) => {
            const functionDir = path_1.default.dirname(blockFunction.path);
            zip.addLocalFolder(functionDir, functionDir.replace(workingDir, ''));
        });
        includes.forEach((include) => {
            zip.addLocalFolder(path_1.default.join(workingDir, include), include);
        });
        zip.writeZip(zipFilePath);
        return zipFilePath;
    }
    catch ({ message }) {
        return console.error(message);
    }
};
const validateFunctions = (blockFunctions) => __awaiter(void 0, void 0, void 0, function* () {
    const baseFunctionsPath = path_1.default.join(workingDir, 'functions');
    console.log(`Validating functions in ${baseFunctionsPath}`);
    const config = new config_1.default();
    const validator = new validations_1.FunctionValidator(config, baseFunctionsPath);
    yield validator.initSchema();
    const results = yield validator.validateFunctions('', blockFunctions);
    let valid = true;
    results.forEach((result) => {
        if (result.status === 'error') {
            valid = false;
        }
        validations_1.logValidationResult(result);
    });
    return { valid, results };
});
// eslint-disable-next-line no-void
void (() => __awaiter(void 0, void 0, void 0, function* () {
    const choices = blocks.map((block) => ({
        title: path_1.default.basename(block, '.json'),
        value: block,
    }));
    const { selected } = (yield prompts_1.default([
        {
            type: 'multiselect',
            name: 'selected',
            message: 'Which blocks do you want to publish?',
            choices,
            instructions: false,
        },
    ]));
    selected.forEach((jsonFile) => {
        // eslint-disable-next-line no-void
        void (() => __awaiter(void 0, void 0, void 0, function* () {
            const block = fs_extra_1.default.readJsonSync(jsonFile);
            const name = path_1.default.basename(jsonFile, '.json');
            if (validateBlockConfig(block)) {
                try {
                    const functionsDir = path_1.default.join(workingDir, 'functions');
                    const funcDefinitions = functionDefinitions_1.functionDefinitions(functionsDir);
                    const blockFunctions = functionDefinitions_1.whitelistedFunctions(funcDefinitions, block.functions);
                    const { valid, results } = yield validateFunctions(blockFunctions);
                    if (valid) {
                        const zip = createBlockZip(name, block);
                        if (zip)
                            yield publishBlocks_1.default(block.functions, zip);
                    }
                    else if (results.some(({ errors }) => errors &&
                        errors.some(({ stack }) => stack === 'instance.icon is not of a type(s) object'))) {
                        console.log(`Maybe auto-convert your function icons using ${chalk_1.default.cyan('bb functions convert-icons')}?`);
                    }
                    else {
                        console.error('Some functions are not valid');
                    }
                }
                catch ({ message }) {
                    console.error(message);
                }
            }
            else {
                console.log(`Cannot publish invalid block ${name}`);
            }
        }))();
    });
}))();
//# sourceMappingURL=bb-blocks-publish.js.map