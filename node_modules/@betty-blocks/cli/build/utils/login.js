"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const prompts_1 = __importDefault(require("prompts"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const config_1 = __importDefault(require("../functions/config"));
const readAuthConfig = () => {
    return config_1.default.readGlobalConfig();
};
const storeAuthConfig = (auth) => {
    config_1.default.writeToGlobalConfig('auth', Object.assign(Object.assign({}, readAuthConfig().auth), auth));
};
const promptCredentials = () => __awaiter(void 0, void 0, void 0, function* () {
    const config = readAuthConfig();
    const { email, password } = (yield prompts_1.default([
        {
            type: 'text',
            name: 'email',
            message: 'Fill in your e-mail address',
            initial: config.auth.email,
        },
        {
            type: 'password',
            name: 'password',
            message: 'Fill in your password',
        },
    ]));
    if (!email.match(/@/)) {
        console.log(`Can't login without an email.`);
        process.exit();
    }
    storeAuthConfig({ email });
    return { email, password };
});
class FusionAuth {
    constructor(config) {
        this.config = config;
    }
    logout() {
        this.clearTokens();
    }
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            this.clearTokens();
            yield this.ensureLogin();
            return this.tokenExists();
        });
    }
    ensureLogin() {
        return __awaiter(this, void 0, void 0, function* () {
            const { email, password } = yield promptCredentials();
            const additionalHeaders = this.config.additionalHeaders();
            return node_fetch_1.default(`${this.config.fusionAuthUrl}/api/login`, {
                method: 'POST',
                body: JSON.stringify({
                    loginId: email,
                    password,
                }),
                headers: Object.assign({ 'Content-Type': 'application/json' }, additionalHeaders),
            }).then((resp) => __awaiter(this, void 0, void 0, function* () {
                if (resp.status === 242) {
                    const { twoFactorId } = (yield resp.json());
                    return this.ensure2FA(twoFactorId);
                }
                if (resp.ok) {
                    const { token } = (yield resp.json());
                    return this.storeToken(token);
                }
                return this.ensureLogin();
            }));
        });
    }
    jwt() {
        return readAuthConfig().auth[this.jwtKey()];
    }
    ensure2FA(twoFactorId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { code } = (yield prompts_1.default([
                {
                    type: 'text',
                    name: 'code',
                    message: 'Fill in your 2FA code',
                },
            ]));
            return node_fetch_1.default(`${this.config.fusionAuthUrl}/api/two-factor/login`, {
                method: 'POST',
                body: JSON.stringify({
                    code,
                    twoFactorId,
                }),
                headers: { 'Content-Type': 'application/json' },
            }).then((resp) => __awaiter(this, void 0, void 0, function* () {
                if (resp.ok) {
                    const { token } = (yield resp.json());
                    this.storeToken(token);
                }
                else {
                    yield this.ensure2FA(twoFactorId);
                }
            }));
        });
    }
    storeToken(token) {
        storeAuthConfig({
            [this.jwtKey()]: token,
        });
    }
    clearTokens() {
        storeAuthConfig({
            [this.jwtKey()]: undefined,
        });
    }
    tokenExists() {
        return !!this.jwt();
    }
    jwtKey() {
        return `jwt.${this.config.zone}`;
    }
}
exports.default = FusionAuth;
//# sourceMappingURL=login.js.map