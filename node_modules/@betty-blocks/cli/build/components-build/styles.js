"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("typescript"));
const fs_extra_1 = require("fs-extra");
const readFilesByType_1 = __importDefault(require("../utils/readFilesByType"));
const reportDiagnostics_1 = require("./reportDiagnostics");
const { mkdir } = fs_extra_1.promises;
exports.readStyles = (rootDir) => __awaiter(void 0, void 0, void 0, function* () {
    const absoluteRootDir = path_1.default.resolve(process.cwd(), rootDir);
    const srcDir = `${absoluteRootDir}/src/styles`;
    const exists = yield fs_extra_1.pathExists(srcDir);
    if (!exists) {
        yield mkdir(srcDir, { recursive: true });
    }
    const styleFiles = yield readFilesByType_1.default(srcDir, 'ts');
    const styleProgram = typescript_1.default.createProgram(styleFiles.map((file) => `${srcDir}/${file}`), {
        outDir: '.styles',
        module: 1,
        esModuleInterop: true,
        allowSyntheticDefaultImports: false,
        target: 99,
        listEmittedFiles: true,
    });
    const diagnostics = [...typescript_1.default.getPreEmitDiagnostics(styleProgram)];
    if (diagnostics.length > 0) {
        reportDiagnostics_1.reportDiagnostics(diagnostics);
        process.exit(1);
    }
    const results = styleProgram.emit();
    if (results.diagnostics.length > 0) {
        reportDiagnostics_1.reportDiagnostics([...results.diagnostics]);
        process.exit(1);
    }
    const globalDiagnostics = [...styleProgram.getGlobalDiagnostics()];
    if (globalDiagnostics.length > 0) {
        reportDiagnostics_1.reportDiagnostics(globalDiagnostics);
        process.exit(1);
    }
    const declarationDiagnostics = [...styleProgram.getDeclarationDiagnostics()];
    if (declarationDiagnostics.length > 0) {
        reportDiagnostics_1.reportDiagnostics(declarationDiagnostics);
        process.exit(1);
    }
    const configDiagnostics = [...styleProgram.getConfigFileParsingDiagnostics()];
    if (configDiagnostics.length > 0) {
        reportDiagnostics_1.reportDiagnostics(configDiagnostics);
        process.exit(1);
    }
    const styles = (results.emittedFiles || [])
        .filter((filename) => /\.(\w+\/){1}\w+\.js/.test(filename))
        .map((filename) => {
        return new Promise((resolve) => {
            Promise.resolve().then(() => __importStar(require(`${absoluteRootDir}/${filename}`))).then((style) => {
                // JSON schema validation
                resolve(style.default);
            })
                .catch((error) => {
                throw new Error(`in ${filename}: ${error}`);
            });
        });
    });
    return Promise.all(styles);
});
exports.buildStyle = (_a) => {
    var { states, basis } = _a, style = __rest(_a, ["states", "basis"]);
    const buildContent = states.reduce((acc, { name, content }) => (Object.assign(Object.assign({}, acc), { [name]: content })), { basis });
    return Object.assign(Object.assign({}, style), { content: buildContent });
};
const isStyleDefinitionContentOverwrite = (overwrite) => {
    return Array.isArray(overwrite);
};
exports.buildReferenceStyle = (style) => {
    if (typeof style === 'undefined') {
        return undefined;
    }
    const { overwrite, name } = style;
    const nameObject = name ? { name } : {};
    if (typeof overwrite === 'undefined') {
        return Object.assign({}, nameObject);
    }
    if (isStyleDefinitionContentOverwrite(overwrite)) {
        const buildOverwrite = overwrite.reduce((acc, { name: key, content }) => (Object.assign(Object.assign({}, acc), { [key]: content })), {});
        return Object.assign(Object.assign({}, nameObject), { overwrite: buildOverwrite });
    }
    return Object.assign(Object.assign({}, nameObject), { overwrite });
};
//# sourceMappingURL=styles.js.map