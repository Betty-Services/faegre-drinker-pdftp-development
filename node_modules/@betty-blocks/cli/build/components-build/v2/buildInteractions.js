"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsonschema_1 = require("jsonschema");
const fs_extra_1 = require("fs-extra");
const { readFile } = fs_extra_1.promises;
const validator = new jsonschema_1.Validator();
const jsonFileSchema = {
    properties: {
        name: { type: 'string' },
        parameters: {
            additionalProperties: {
                type: 'object',
                properties: {
                    type: {
                        enum: [
                            'BOOLEAN',
                            'INVALIDATE_QUERIES',
                            'NUMBER',
                            'STRING',
                            'MUTATION',
                        ],
                    },
                },
                required: ['type'],
            },
            required: [],
            type: 'object',
        },
        returnType: { enum: ['BOOLEAN', 'NUMBER', 'STRING', 'VOID'] },
    },
    required: ['name', 'parameters', 'returnType'],
    type: 'object',
};
function readInteraction(jsonFile, codeFile) {
    return __awaiter(this, void 0, void 0, function* () {
        const jsonFileContent = yield fs_extra_1.readJson(jsonFile);
        const jsonFileValidateResult = validator.validate(jsonFileContent, jsonFileSchema);
        if (!jsonFileValidateResult.valid) {
            throw new Error(`Cannot build interaction \`${jsonFile}\`: ${jsonFileValidateResult.errors.toString()}`);
        }
        const configuration = jsonFileContent;
        const code = yield readFile(codeFile, 'utf-8');
        return Object.assign(Object.assign({}, configuration), { code });
    });
}
function buildInteractions(rootDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const srcDir = `${rootDir}/src/interactions`;
        const distDir = `${rootDir}/dist`;
        if (!(yield fs_extra_1.pathExists(srcDir))) {
            return;
        }
        const files = yield fs_extra_1.readdir(srcDir);
        const output = {
            apiVersion: 'v2',
            interactions: yield Promise.all(files
                .filter((file) => file.endsWith('.json'))
                .map((file) => readInteraction(`${srcDir}/${file}`, `${srcDir}/${file.substring(0, file.length - 5)}.js`))),
        };
        yield fs_extra_1.outputJson(`${distDir}/interactions.json`, output);
    });
}
exports.buildInteractions = buildInteractions;
//# sourceMappingURL=buildInteractions.js.map