"use strict";
/* eslint-disable camelcase,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-argument */
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const commander_1 = __importDefault(require("commander"));
/* internal dependencies */
const functionDefinitions_1 = require("./functions/functionDefinitions");
const publishAppFunctions_1 = __importDefault(require("./functions/publishAppFunctions"));
const publishCustomFunctions_1 = __importDefault(require("./functions/publishCustomFunctions"));
const validations_1 = require("./functions/validations");
const config_1 = __importDefault(require("./functions/config"));
/* process arguments */
commander_1.default
    .name('bb functions publish')
    .option('-b, --bump', 'Bump the revision number.')
    .option('-s, --skip', 'Skip building the custom functions bundle.')
    .option('--skip-compile', 'Skip the compilation of the application.')
    .option('-h, --host <host>', 'Set hostname to publish to. Defaults to <identifier>.bettyblocks.com')
    .parse(process.argv);
const { host, skip, bump, skipCompile } = commander_1.default;
/* execute command */
const workingDir = process.cwd();
const validateFunctions = () => __awaiter(void 0, void 0, void 0, function* () {
    const baseFunctionsPath = path_1.default.join(workingDir, 'functions');
    console.log(`Validating functions in ${baseFunctionsPath}`);
    const config = new config_1.default();
    const validator = new validations_1.FunctionValidator(config, baseFunctionsPath);
    yield validator.initSchema();
    const results = yield validator.validateFunctions();
    let valid = true;
    results.forEach((result) => {
        if (result.status === 'error') {
            valid = false;
        }
        validations_1.logValidationResult(result);
    });
    return { valid, results };
});
// eslint-disable-next-line no-void
void (() => __awaiter(void 0, void 0, void 0, function* () {
    if (fs_extra_1.default.existsSync(path_1.default.join(workingDir, '.app-functions'))) {
        const { valid, results } = yield validateFunctions();
        if (valid) {
            yield publishAppFunctions_1.default({ skipCompile });
        }
        else if (results.some(({ errors }) => errors &&
            errors.some(({ stack }) => stack === 'instance.icon is not of a type(s) object'))) {
            console.log(`Maybe auto-convert your function icons using ${chalk_1.default.cyan('bb functions convert-icons')}?`);
        }
        else {
            const baseFunctionsPath = path_1.default.join(workingDir, 'functions');
            const allFunctions = functionDefinitions_1.functionDefinitions(baseFunctionsPath, true);
            const versionedFunctions = functionDefinitions_1.functionDefinitions(baseFunctionsPath);
            if (allFunctions.length !== versionedFunctions.length) {
                console.log(`Maybe auto-version your functions without a version number using ${chalk_1.default.cyan('bb functions autoversion')}?`);
            }
        }
    }
    else {
        publishCustomFunctions_1.default(host, bump, skip);
    }
}))();
//# sourceMappingURL=bb-functions-publish.js.map