"use strict";
/* eslint-disable camelcase */
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const form_data_1 = __importDefault(require("form-data"));
/* internal dependencies */
const functionDefinitions_1 = require("../functions/functionDefinitions");
const login_1 = __importDefault(require("../utils/login"));
const config_1 = __importDefault(require("../functions/config"));
/* execute command */
const workingDir = process.cwd();
const uploadBlock = (blockDefinitionsFile, functionsJson, config) => __awaiter(void 0, void 0, void 0, function* () {
    const fusionAuth = new login_1.default(config);
    const form = new form_data_1.default();
    form.append('name', path_1.default.basename(blockDefinitionsFile, '.zip'));
    form.append('functions', functionsJson);
    form.append('file', fs_extra_1.default.createReadStream(blockDefinitionsFile));
    const applicationId = yield config.applicationId();
    if (!applicationId) {
        throw new Error("Couldn't publish block(s), Error: application id not found");
    }
    const url = `${config.blockstoreApiUrl}/blocks/publish`;
    return node_fetch_1.default(url, {
        method: 'POST',
        body: form,
        headers: {
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            Authorization: `Bearer ${fusionAuth.jwt()}`,
            ApplicationId: applicationId,
            Accept: 'application/json',
        },
    }).then((res) => __awaiter(void 0, void 0, void 0, function* () {
        if (res.status === 401 || res.status === 403) {
            yield fusionAuth.ensureLogin();
            return uploadBlock(blockDefinitionsFile, functionsJson, config);
        }
        if (res.status !== 201) {
            const error = yield res.text();
            throw new Error(`Couldn't publish block(s), Error: ${res.status}, ${error.match('## Connection details') ? 'Something went wrong' : error}`);
        }
        return true;
    }));
});
const createAndPublishFiles = (config, functions, zip) => __awaiter(void 0, void 0, void 0, function* () {
    const functionsDir = path_1.default.join(workingDir, 'functions');
    const funcDefinitions = functionDefinitions_1.functionDefinitions(functionsDir);
    const blockFunctions = functionDefinitions_1.whitelistedFunctions(funcDefinitions, functions);
    const functionsJson = functionDefinitions_1.stringifyDefinitions(blockFunctions);
    yield uploadBlock(zip, functionsJson, config);
});
const publishBlocks = (functions, zip) => __awaiter(void 0, void 0, void 0, function* () {
    const config = new config_1.default();
    console.log(`Publishing to ${config.host} (${config.zone})`);
    yield createAndPublishFiles(config, functions, zip);
    console.log('Done.');
});
exports.default = publishBlocks;
//# sourceMappingURL=publishBlocks.js.map