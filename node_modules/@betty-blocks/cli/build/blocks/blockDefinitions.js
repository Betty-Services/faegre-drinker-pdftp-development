"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const glob_1 = __importDefault(require("glob"));
const lodash_1 = require("lodash");
/* @doc createPackageJson
  Returns an object containing all data needed for the block package json
*/
const createPackageJson = (name, rootPackageJson, dependencies) => {
    const rootDependencies = lodash_1.pick(fs_extra_1.default.readJsonSync(rootPackageJson).dependencies, dependencies);
    const packageJson = JSON.stringify({
        name,
        version: '1.0.0',
        private: 'true',
        dependencies: rootDependencies,
    }, null, 2);
    return packageJson;
};
exports.createPackageJson = createPackageJson;
/* @doc functionDirs
  Returns a list of blocks.
*/
const blockFiles = (blockDir) => {
    return glob_1.default
        .sync(path_1.default.join(blockDir, '*.json').replace(/\\/g, '/'))
        .reduce((blocks, blockDefinition) => {
        blocks.push(blockDefinition);
        return blocks;
    }, []);
};
/* @doc blockDefinitions
  Returns an array containing all block definitions
  inside the given blocksDir.
*/
const blockDefinitions = (blocksDir) => {
    return blockFiles(blocksDir).map((blocks) => blocks);
};
exports.blockDefinitions = blockDefinitions;
/* @doc blockDefinitionPath
  Expands the block dir with a json file with the given blockname.
*/
const blockDefinitionPath = (blockPath, blockName) => path_1.default.join(blockPath, `${blockName}.json`);
exports.blockDefinitionPath = blockDefinitionPath;
/* @doc newBlockDefinition
  If block does not exists it will create a new json file with the given blockname.
*/
const newBlockDefinition = (blocksDir, blockName) => {
    try {
        const existingBlock = fs_extra_1.default.existsSync(blockDefinitionPath(blocksDir, blockName));
        if (existingBlock)
            return 'Block already exists';
        fs_extra_1.default.mkdirpSync(blocksDir);
        fs_extra_1.default.writeJSONSync(blockDefinitionPath(blocksDir, blockName), {
            dependencies: [],
            functions: [],
            includes: [],
        }, { spaces: 2 });
        return `blocks/${blockName}.json created`;
    }
    catch (err) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        throw new Error(`could not initialize new block ${blocksDir}: ${err}`);
    }
};
exports.newBlockDefinition = newBlockDefinition;
//# sourceMappingURL=blockDefinitions.js.map