"use strict";
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const commander_1 = __importDefault(require("commander"));
/* internal dependencies */
const validations_1 = require("./functions/validations");
const functionDefinitions_1 = require("./functions/functionDefinitions");
const config_1 = __importDefault(require("./functions/config"));
/* process arguments */
commander_1.default
    .usage('[function-name]')
    .name('bb functions validate')
    .parse(process.argv);
const { args: [inputFunctionName], } = commander_1.default;
/* execute command */
const workingDir = process.cwd();
const baseFunctionsPath = path_1.default.join(workingDir, 'functions');
const config = new config_1.default();
// eslint-disable-next-line no-void
void (() => __awaiter(void 0, void 0, void 0, function* () {
    const validator = new validations_1.FunctionValidator(config, baseFunctionsPath);
    yield validator.initSchema();
    const results = yield validator.validateFunctions(inputFunctionName);
    results.forEach(validations_1.logValidationResult);
    const allFunctions = functionDefinitions_1.functionDefinitions(baseFunctionsPath, true);
    const versionedFunctions = functionDefinitions_1.functionDefinitions(baseFunctionsPath);
    if (allFunctions.length !== versionedFunctions.length) {
        console.log(`Maybe auto-version your functions without a version number using ${chalk_1.default.cyan('bb functions autoversion')}?`);
    }
    if (results.some(({ errors }) => errors &&
        errors.some(({ stack }) => stack === 'instance.icon is not of a type(s) object'))) {
        console.log(`Maybe auto-convert your function icons using ${chalk_1.default.cyan('bb functions convert-icons')}?`);
    }
}))();
//# sourceMappingURL=bb-functions-validate.js.map