"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const functionDefinitions_1 = require("./functionDefinitions");
const check = chalk_1.default.green(`âœ”`);
const convert = (functionsPath) => {
    const { log } = console;
    log('Checking for function icons to convert ...');
    functionDefinitions_1.functionDirs(functionsPath, true).forEach((functionPath) => {
        const definition = functionDefinitions_1.functionDefinition(functionPath, functionsPath);
        const { name, version } = definition;
        const fn = `${name}-${version}`;
        if (typeof definition.schema.icon === 'string') {
            const icons = {
                AuthenticateIcon: { color: 'Teal', name: 'UserArrowInIcon' },
                ConditionIcon: { color: 'Yellow', name: 'ConditionIcon' },
                CreateIcon: { color: 'Green', name: 'PlusIcon' },
                DeleteIcon: { color: 'Pink', name: 'TrashIcon' },
                EmailIcon: { color: 'Orange', name: 'AtIcon' },
                FinishFlagIcon: { color: 'Grey', name: 'FinishIcon' },
                HttpRequestIcon: { color: 'Orange', name: 'CloudIcon' },
                LogsIcon: { color: 'Orange', name: 'FileLogIcon' },
                LoopIcon: { color: 'Blue', name: 'LoopIcon' },
                UpdateIcon: { color: 'Green', name: 'ArrowClockwiseIcon' },
                UploadIcon: { color: 'Orange', name: 'UploadIcon' },
            };
            definition.schema.icon = icons[definition.schema.icon] || {
                color: 'Orange',
                name: 'ActionsIcon',
            };
            fs_extra_1.default.writeJSONSync(functionDefinitions_1.functionDefinitionPath(functionPath), definition.schema, {
                spaces: 2,
            });
            log(`${check} Converted: ${fn} => ${JSON.stringify(definition.schema.icon)}`);
        }
        else {
            log(`${check} Skipped: ${fn}`);
        }
    });
    log('Done.');
};
exports.convert = convert;
//# sourceMappingURL=icons.js.map