"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const kebabCase_1 = __importDefault(require("lodash/kebabCase"));
const path_1 = __importDefault(require("path"));
const functionDefinitions_1 = require("./functionDefinitions");
const check = chalk_1.default.green(`✔`);
const cross = chalk_1.default.red(`✖`);
const migrate = (functionsPath, verbose = false) => {
    const log = (msg) => verbose && console.log(msg);
    log('Checking for unversioned functions ...');
    functionDefinitions_1.functionDirs(functionsPath, true).forEach((functionPath) => {
        const definition = functionDefinitions_1.functionDefinition(functionPath, functionsPath);
        const { name } = definition;
        let { version } = definition;
        let postfix = kebabCase_1.default(name);
        if (functionDefinitions_1.isFunctionVersion(functionPath, functionsPath)) {
            postfix = `-${version}`;
        }
        else {
            version = '1.0';
            postfix = ` => ${path_1.default.join(name, version)}`;
            try {
                delete definition.schema.name;
                fs_extra_1.default.writeJSONSync(functionDefinitions_1.functionDefinitionPath(functionPath), definition.schema, {
                    spaces: 2,
                });
                const tmpDir = '.tmp';
                const tempDir = path_1.default.join(tmpDir, `${kebabCase_1.default(name)}-${version}`);
                const targetDir = path_1.default.join(functionsPath, kebabCase_1.default(name));
                fs_extra_1.default.ensureDirSync(tmpDir);
                fs_extra_1.default.renameSync(functionPath, tempDir);
                fs_extra_1.default.mkdirSync(targetDir);
                fs_extra_1.default.moveSync(tempDir, path_1.default.join(targetDir, version));
            }
            catch (err) {
                log(`${cross} Failed to version: ${name}`);
                return;
            }
        }
        log(`${check} Version: ${name}${postfix}`);
    });
};
exports.migrate = migrate;
//# sourceMappingURL=versions.js.map