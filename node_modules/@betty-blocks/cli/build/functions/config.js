"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const prompts_1 = __importDefault(require("prompts"));
class Config {
    constructor(config) {
        this.config = Object.assign(Object.assign(Object.assign({}, Config.defaultConfig()), Config.readConfig()), (config || {}));
    }
    static writeToGlobalConfig(key, value) {
        const config = this.readGlobalConfig();
        this.writeGlobalConfig(Object.assign(Object.assign({}, config), { [key]: value }));
    }
    static registerApplicationId(identifier, zone, applicationId) {
        this.writeToGlobalConfig('applicationMap', Object.assign(Object.assign({}, Config.readGlobalConfig().applicationMap), { [this.applicationIdKey(identifier, zone)]: applicationId }));
    }
    static readGlobalConfig() {
        this.ensureGlobalConfigExists();
        return fs_extra_1.default.readJSONSync(this.globalConfigPath);
    }
    static ensureGlobalConfigExists() {
        if (!fs_extra_1.default.existsSync(this.globalConfigPath)) {
            fs_extra_1.default.writeJSONSync(this.globalConfigPath, {
                auth: {},
                applicationMap: {},
            }, { spaces: 2 });
        }
    }
    static writeGlobalConfig(map) {
        this.ensureGlobalConfigExists();
        fs_extra_1.default.writeJSONSync(this.globalConfigPath, map, { spaces: 2 });
    }
    static promptApplicationId(identifier, zone) {
        return __awaiter(this, void 0, void 0, function* () {
            const { applicationId } = (yield prompts_1.default([
                {
                    type: 'text',
                    name: 'applicationId',
                    message: `Please provide the UUID for '${identifier}' (${zone})`,
                },
            ]));
            if (!applicationId) {
                return this.promptApplicationId(identifier, zone);
            }
            this.registerApplicationId(identifier, zone, applicationId);
            return applicationId;
        });
    }
    get skipCompile() {
        return !!this.config.skipCompile;
    }
    get identifier() {
        if (!this._identifier) {
            this._identifier =
                this.config.identifier || path_1.default.basename(process.cwd()).split('.')[0];
        }
        return this._identifier;
    }
    get zone() {
        if (!this._zone) {
            this._zone =
                this.config.zone ||
                    path_1.default.basename(process.cwd()).split('.')[1] ||
                    'production';
        }
        return this._zone;
    }
    get buildDir() {
        if (this.zone === 'production') {
            return this.identifier;
        }
        return `${this.identifier}.${this.zone}`;
    }
    get host() {
        if (!this._host) {
            this._host = this.config.host || this.defaultHost();
        }
        return this._host;
    }
    get fusionAuthUrl() {
        let postfix = '';
        if (this.zone === 'acceptance') {
            postfix = '.acceptance';
        }
        else if (this.zone === 'edge') {
            postfix = '.edge';
        }
        return this.config.fusionAuthUrl.replace('{ZONEPOSTFIX}', postfix);
    }
    get builderApiUrl() {
        return this.config.builderApiUrl.replace('{HOST}', this.host);
    }
    get blockstoreApiUrl() {
        let postfix = '';
        if (this.zone.match(/^(acceptance|edge)$/)) {
            postfix = `.${this.zone}`;
        }
        return this.config.blockstoreApiUrl.replace('{ZONEPOSTFIX}', postfix);
    }
    additionalHeaders() {
        let tenantId = null;
        if (this.config.tenantId) {
            tenantId = this.config.tenantId;
        }
        else {
            switch (this.zone) {
                case 'edge':
                    tenantId = '62313937-6230-3361-3465-643833656463';
                    break;
                default:
                    tenantId = null;
            }
        }
        if (tenantId) {
            return {
                'X-FusionAuth-TenantId': tenantId,
            };
        }
        return {};
    }
    applicationId() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._applicationId) {
                this._applicationId =
                    this.config.applicationId || (yield this.fetchApplicationId());
            }
            return this._applicationId;
        });
    }
    fetchApplicationId() {
        return __awaiter(this, void 0, void 0, function* () {
            const map = Config.readGlobalConfig();
            const key = Config.applicationIdKey(this.identifier, this.zone);
            if (map.applicationMap[key]) {
                return map.applicationMap[key];
            }
            return Config.promptApplicationId(this.identifier, this.zone);
        });
    }
    get schemaUrl() {
        return this.config.schemaUrl;
    }
    get functionSchemaPath() {
        return this.config.functionSchemaPath;
    }
    defaultHost() {
        let subdomain = this.identifier;
        if (this.zone !== 'production') {
            subdomain = `${subdomain}.${this.zone}`;
        }
        return `https://${subdomain}.${this.config.domain}`;
    }
    get includes() {
        return this.config.includes || [];
    }
}
/* static */
Config.localConfigPath = path_1.default.join(process.cwd(), 'config.json');
Config.globalConfigPath = path_1.default.join(os_1.default.homedir(), '.bb-cli.json');
Config.applicationIdKey = (identifier, zone) => {
    return `${identifier}.${zone}`;
};
Config.readConfig = () => {
    const cfgPath = Config.localConfigPath;
    if (fs_extra_1.default.pathExistsSync(cfgPath)) {
        return fs_extra_1.default.readJsonSync(cfgPath);
    }
    return {};
};
Config.defaultConfig = () => {
    return {
        schemaUrl: 'https://raw.githubusercontent.com',
        functionSchemaPath: '/bettyblocks/json-schema/master/schemas/actions/function.json',
        cacheDir: '.tmp/',
        fusionAuthUrl: 'https://id{ZONEPOSTFIX}.bettyblocks.com',
        builderApiUrl: '{HOST}/api/builder',
        blockstoreApiUrl: 'https://my{ZONEPOSTFIX}.bettyblocks.com/block-store-api',
        domain: 'bettyblocks.com',
        skipCompile: false,
        includes: [],
    };
};
exports.default = Config;
//# sourceMappingURL=config.js.map