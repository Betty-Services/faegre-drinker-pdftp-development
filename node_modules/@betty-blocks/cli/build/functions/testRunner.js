"use strict";
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint import/no-extraneous-dependencies: ["error", {"optionalDependencies": true}] */
/* npm dependencies */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const adm_zip_1 = __importDefault(require("adm-zip"));
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
/* internal dependencies */
const functionDefinitions_1 = require("./functionDefinitions");
/* execute command */
const check = chalk_1.default.green(`✔`);
const cross = chalk_1.default.red(`✖`);
const right = chalk_1.default.green(`›`);
const build = (pattern, workingDir) => __awaiter(void 0, void 0, void 0, function* () {
    const testFiles = glob_1.default
        .sync(`${pattern || 'test/'}**`.replace(/\\/g, '/'))
        .reduce((files, match) => {
        const file = match.replace(/\//g, path_1.default.sep);
        if (file.match(/\.test\.js$/)) {
            files.push(file);
        }
        return files;
    }, []);
    if (!testFiles.length) {
        return { exitCode: 1, stdout: 'No test files found.', stderr: '' };
    }
    const functionsDir = path_1.default.join(workingDir, 'functions');
    const tmpDir = path_1.default.join(workingDir, '.tmp');
    const zipFile = functionDefinitions_1.zipFunctionDefinitions(functionsDir);
    const zip = new adm_zip_1.default(zipFile);
    zip.extractAllTo(path_1.default.join(tmpDir, 'app'), true);
    fs_extra_1.default.writeJSONSync(path_1.default.join(tmpDir, 'package.json'), {
        name: 'app',
        dependencies: { app: 'file:./app' },
        devDependencies: {
            webpack: '^5.10.0',
            'webpack-cli': '^4.2.0',
        },
        scripts: {
            all: 'yarn --force && yarn build',
            build: 'npx webpack --config webpack.config.js',
        },
    }, { spaces: 2 });
    fs_extra_1.default.writeFileSync(path_1.default.join(tmpDir, 'webpack.config.js'), `module.exports = {
  target: 'node',
  entry: './app.js',
  mode: 'production',
  output: {
    filename: 'app.bundle.js',
    libraryTarget: 'var',
    library: 'app',
  },
};
`);
    fs_extra_1.default.writeFileSync(path_1.default.join(tmpDir, 'app.js'), `import { default as $app } from 'app';

${testFiles.map((file) => fs_extra_1.default.readFileSync(file, 'utf-8')).join('\n\n')}
`);
    let stdout = '';
    let stderr = '';
    const exitCode = yield new Promise((res) => {
        const process = child_process_1.spawn(`cd ${tmpDir} && yarn && yarn all`, {
            shell: true,
        });
        process.stdout.on('data', (data) => {
            stdout += data;
        });
        process.stderr.on('data', (data) => {
            stderr += data;
        });
        process.on('close', res);
    });
    return { exitCode, stdout, stderr };
});
const run = (workingDir, ivm) => {
    const helpers = path_1.default.join(workingDir, 'test', 'helpers.js');
    const bundle = path_1.default.join(workingDir, '.tmp', 'dist', 'app.bundle.js');
    const isolate = new ivm.Isolate({ memoryLimit: 128 });
    const context = isolate.createContextSync();
    context.global.setSync('ivm', ivm);
    context.global.setSync(`$console`, new ivm.Reference((level, args) => 
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    console[level](...args)));
    const script = isolate.compileScriptSync(`function run(resolve, reject) {
  
  const tests = [];
  let failures = 0;
  
  const console = (() => {
    const escape = (value) => {
      switch (typeof(value)) {
      case "function":
        return value.toString();
      case "object":
        if (value == null) {
          return value;
        }
        if (value instanceof Array) {
          return value.map(escape);
        } else {
          return Object.keys(value).reduce((o, k) => {
            o[k] = escape(value[k]);
            return o;
          }, {});
        }
      default:
        return value;
      }
    };

    const log = (level) =>
      (...args) =>
        $console.apply(null, [
          level,
          new ivm.ExternalCopy(escape(args)).copyInto()
        ]);

    return {
      log: log('log'),
      debug: log('debug'),
      info: log('info'),
      warn: log('warn'),
      error: log('error'),
    };
  })();

  const isEqual = (t,e) => {
    function n(t){return Object.prototype.toString.call(t).slice(8,-1).toLowerCase()}let r=n(t);return r===n(e)&&("array"===r?function(){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(!isEqual(t[n],e[n]))return!1;return!0}():"object"===r?function(){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(let n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&!isEqual(t[n],e[n]))return!1;return!0}():"function"===r?t.toString()===e.toString():t===e)
  };

  const test = (desc, fn) => {
    tests.push(new Promise((resolve, reject) => {
      fn()
        .then(() => {
          console.log('\\x1b[32m%s\\x1b[0m', '\\u2714 test ' + JSON.stringify(desc));
          resolve();
        })
        .catch((e) => {
          console.log('\\x1b[31m%s\\x1b[0m', '\\u2718 test ' + JSON.stringify(desc));
          console.error(e.message);
          resolve();
          failures++;
        });
    }));
  };

  const assert = (left, right) => {
    if (!isEqual(left, right)) {
      throw new Error(\`\\x1b[31m  Assertion failed\\x1b[0m
  \\x1b[36mleft:\\x1b[0m   \${JSON.stringify(left)}
  \\x1b[36mright:\\x1b[0m  \${JSON.stringify(right)}\`);
    }
  };

  ${fs_extra_1.default.existsSync(helpers) ? fs_extra_1.default.readFileSync(helpers, 'utf-8') : ''}
  ${fs_extra_1.default.readFileSync(bundle, 'utf-8')}

  Promise.all(tests).then(() => {
    let summary;
    
    if (failures) {
      summary = \`\\x1b[31m\${tests.length} tests, \${failures} failure\${
        failures > 1 ? 's' : ''
      }\\x1b[0m\`;
    } else {
      summary = \`\\x1b[32m\${tests.length} tests, 0 failures\\x1b[0m\`;
    }
    
    resolve.applyIgnored(null, [
      new ivm.ExternalCopy(summary).copyInto()
    ]);
  });
}
`);
    return new Promise((resolve, reject) => {
        try {
            script.runSync(context);
            context.global
                .getSync('run', { reference: true })
                .applySync(null, [new ivm.Reference(resolve), new ivm.Reference(reject)], { timeout: 60000 });
        }
        catch (error) {
            reject(error);
        }
    });
};
const runTest = (pattern, workingDir) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // @ts-ignore
        const { default: ivm } = yield Promise.resolve().then(() => __importStar(require('isolated-vm')));
        let time;
        const start = () => new Date().getTime();
        const stop = () => (new Date().getTime() - time) / 1000;
        console.log(`${right} Building artifacts ...`);
        time = start();
        const { exitCode, stdout } = yield build(pattern, workingDir);
        const buildTime = stop();
        if (exitCode) {
            console.log(`${cross} ${stdout}`);
            return;
        }
        console.log(`${check} Build succeeded`);
        console.log(`${right} Running tests ...`);
        time = start();
        const summary = yield run(workingDir, ivm);
        const testTime = stop();
        console.log(`\nFinished in ${(buildTime + testTime).toFixed(3)} seconds (build: ${buildTime.toFixed(3)}s, tests: ${testTime.toFixed(3)})`);
        console.log(summary);
    }
    catch (error) {
        const { code } = error;
        if (code === 'MODULE_NOT_FOUND')
            console.log('Unable to run tests (isolated-vm is not installed). If you want to install isolated-vm, you will need to install the following requirements: (make, g++ and python) and run "npm update -g @betty-blocks/cli"');
        else
            console.log(`${cross} ${String(error)}`);
    }
});
exports.runTest = runTest;
//# sourceMappingURL=testRunner.js.map