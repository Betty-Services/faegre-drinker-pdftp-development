"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/restrict-template-expressions */
const node_fetch_1 = __importDefault(require("node-fetch"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const jsonschema_1 = require("jsonschema");
const functionDefinitions_1 = require("./functionDefinitions");
const fetchRemoteSchema = (schemaUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield node_fetch_1.default(schemaUrl);
    const json = yield res.json();
    return json;
});
const importNextSchema = (validator, schemaId) => __awaiter(void 0, void 0, void 0, function* () {
    const schemaJSON = yield fetchRemoteSchema(schemaId);
    validator.addSchema(schemaJSON, schemaId);
    const nextSchemaId = validator.unresolvedRefs.shift();
    if (!nextSchemaId) {
        return validator;
    }
    return importNextSchema(validator, nextSchemaId);
});
const importSchema = (validator, config) => __awaiter(void 0, void 0, void 0, function* () {
    const functionSchemaUrl = config.schemaUrl + config.functionSchemaPath;
    return importNextSchema(validator, functionSchemaUrl);
});
const functionValidator = (config) => __awaiter(void 0, void 0, void 0, function* () {
    const validator = new jsonschema_1.Validator();
    return importSchema(validator, config);
});
exports.functionValidator = functionValidator;
const validateFunctionDefinition = (validator, definition) => {
    const functionSchemaId = Object.keys(validator.schemas).find((k) => {
        return k.match(/function\.json$/);
    });
    if (!functionSchemaId) {
        throw new Error(`Cannot find Function schema Id, ${functionSchemaId}`);
    }
    const functionSchema = validator.schemas[functionSchemaId];
    return validator.validate(definition, functionSchema);
};
const forceVersion = ({ path: functionPath }, functionsDir) => {
    if (!functionDefinitions_1.isFunctionVersion(path_1.default.dirname(functionPath), functionsDir)) {
        throw new Error(`${path_1.default.dirname(functionPath)} does not apply as a valid version directory`);
    }
};
const validateSchema = (functionJson, validator) => {
    const { name, version, path: definitionPath, schema, } = functionJson;
    const { errors } = validateFunctionDefinition(validator, schema);
    const status = errors.length ? 'error' : 'ok';
    return {
        status,
        path: definitionPath,
        functionName: `${name}-${version}`,
        errors,
    };
};
exports.validateSchema = validateSchema;
class FunctionValidator {
    constructor(config, functionsDir) {
        this.config = config;
        this.schemaValidator = new jsonschema_1.Validator();
        this.functionsDir = functionsDir;
    }
    initSchema() {
        return __awaiter(this, void 0, void 0, function* () {
            yield importSchema(this.schemaValidator, this.config);
        });
    }
    validateFunction(definition) {
        const functionPath = definition.path;
        const functionName = functionPath;
        try {
            forceVersion(definition, this.functionsDir);
            return validateSchema(definition, this.schemaValidator);
        }
        catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            return {
                status: 'error',
                path: functionPath,
                functionName,
                errors: [new Error(message)],
            };
        }
    }
    validateFunctions(functionName, blockFunctions) {
        return __awaiter(this, void 0, void 0, function* () {
            const definitions = functionDefinitions_1.functionDefinitions(this.functionsDir, true);
            const functions = blockFunctions || definitions;
            const validations = [];
            functions.forEach((definition) => {
                const preleadingPath = path_1.default.join(this.functionsDir, functionName || '', path_1.default.sep);
                if (definition.path.indexOf(preleadingPath) === 0) {
                    validations.push(this.validateFunction(definition));
                }
            });
            return Promise.all(validations);
        });
    }
}
exports.FunctionValidator = FunctionValidator;
const logValidationResult = ({ path: functionPath, status, functionName, errors, }) => {
    if (status === 'ok') {
        const mark = chalk_1.default.green(`✔`);
        console.log(`${mark} Validate: ${functionName}`);
    }
    else {
        const msg = chalk_1.default.red(`${errors}`);
        const mark = chalk_1.default.red(`✖`);
        console.log(`${mark} Validate: ${functionName || functionPath}\n\t${msg}`);
    }
};
exports.logValidationResult = logValidationResult;
//# sourceMappingURL=validations.js.map