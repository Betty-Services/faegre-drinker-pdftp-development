"use strict";
/* eslint-disable no-use-before-define */
/* eslint-disable @typescript-eslint/no-use-before-define */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const joi_1 = __importDefault(require("joi"));
const validation_1 = require("../../utils/validation");
const styles_1 = require("../styles");
const componentOption_1 = require("./componentOption");
const linkedOption_1 = require("./linkedOption");
const linkedPartial_1 = require("./linkedPartial");
const shadows = [
    'none',
    '0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)',
    '0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)',
    '0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)',
    '0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)',
    '0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)',
    '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)',
    '0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)',
    '0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)',
    '0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)',
    '0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)',
    '0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)',
    '0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)',
    '0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)',
    '0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)',
    '0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)',
    '0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)',
    '0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)',
    '0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)',
    '0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)',
    '0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)',
    '0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)',
    '0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)',
    '0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)',
    '0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)',
];
const isString = joi_1.default.string().max(255);
const validRem = /^\d{1,5}\.?\d{0,5}rem$/;
const optionType = ['STATIC', 'THEME_COLOR'];
const styleValidator = {
    BUTTON: joi_1.default.object({
        backgroundColor: joi_1.default.object({
            type: optionType,
            value: isString,
        }),
        borderColor: joi_1.default.object({
            type: optionType,
            value: isString,
        }),
        borderRadius: joi_1.default.array()
            .max(1)
            .items(isString.required().pattern(validRem)),
        borderStyle: isString,
        borderWidth: joi_1.default.array()
            .max(1)
            .items(isString.required().pattern(validRem)),
        boxShadow: shadows,
        color: joi_1.default.object({
            type: optionType,
            value: isString,
        }),
        fontFamily: ['Roboto', 'serif', 'sans-serif', 'monospace'],
        fontSize: isString.pattern(validRem),
        fontStyle: ['italic', 'none'],
        fontWeight: ['300', '400', '500', '700'],
        letterSpacing: isString.pattern(validRem),
        lineHeight: joi_1.default.string().max(255).pattern(/^\d*$/),
        padding: [
            isString,
            joi_1.default.array().max(4).items(isString.required().pattern(validRem)),
        ],
        textDecoration: ['underline', 'none'],
        textTransform: ['uppercase', 'none'],
    }),
};
const partialSchema = () => {
    return joi_1.default.object({
        ref: joi_1.default.object({
            id: joi_1.default.string().required(),
        }),
        type: joi_1.default.string().valid('PARTIAL').required(),
        partialId: joi_1.default.string().allow('').required(),
    });
};
const wrapperSchema = (styles, componentStyleMap, prefabType) => {
    return joi_1.default.object({
        type: joi_1.default.string().valid('WRAPPER').required(),
        label: joi_1.default.string(),
        optionCategories: joi_1.default.array().items(componentOption_1.optionCategorySchema).min(1),
        options: joi_1.default.array()
            .items(linkedOption_1.linkedOptionSchema, linkedPartial_1.linkedPartialSchema)
            .required(),
        descendants: joi_1.default.array()
            .items(joi_1.default.custom(exports.validateComponent(styles, componentStyleMap, prefabType)))
            .required(),
    });
};
const validateComponentStyle = (styles, deprecatedStylesFlag) => (prefabObject) => {
    const { name: componentName, style } = prefabObject;
    if (deprecatedStylesFlag || typeof style === 'undefined') {
        return prefabObject;
    }
    const { name: styleName, overwrite = [] } = style;
    const stylesByType = styles[componentName];
    const styleByName = stylesByType && stylesByType[styleName];
    if (!styleByName) {
        throw new Error(chalk_1.default.red(`\nBuild error in component style reference to unkown style ${componentName}:${styleName} \n`));
    }
    const validCssObjects = [
        'basis',
        ...styleByName.states.map(({ name: stateName }) => stateName),
    ];
    const validCssObjectValues = styleByName.states.reduce((acc, { name, content }) => (Object.assign(Object.assign({}, acc), { [name]: Object.keys(content) })), { basis: Object.keys(styleByName.basis) });
    overwrite.forEach(({ name: stateName, content }) => {
        if (!validCssObjects.includes(stateName)) {
            throw new Error(chalk_1.default.red(`\nBuild error in component style reference invalid overwrite for ${componentName} where ${stateName} does not exist in style ${styleName} \n`));
        }
        const validCssKeys = validCssObjectValues[stateName] || [];
        Object.keys(content).forEach((cssKey) => {
            if (!validCssKeys.includes(cssKey)) {
                throw new Error(chalk_1.default.red(`\nBuild error in component style reference invalid overwrite for ${componentName}:${styleName} where ${stateName} overwrites a non existing css property ${cssKey} \n`));
            }
        });
    });
    return prefabObject;
};
const componentSchema = (styles, componentStyleMap, styleType, prefabType) => {
    const canValidateOldStyle = styleType && styleValidator[styleType];
    const deprecatedStyleSchema = joi_1.default.object({
        name: joi_1.default.string().max(255).alphanum(),
        overwrite: canValidateOldStyle || joi_1.default.any(),
    });
    const styleSchema = joi_1.default.object({
        name: joi_1.default.string().max(255).alphanum().required(),
        overwrite: styles_1.overwriteSchema,
    });
    const deprecatedStylesFlag = Object.keys(styles).length === 0;
    return joi_1.default.object({
        name: joi_1.default.string().required(),
        label: joi_1.default.string(),
        style: deprecatedStylesFlag ? deprecatedStyleSchema : styleSchema,
        ref: joi_1.default.object({
            id: joi_1.default.string().required(),
        }),
        optionCategories: joi_1.default.array().items(componentOption_1.optionCategorySchema).min(1),
        options: joi_1.default.array().items(componentOption_1.optionSchema).required(),
        type: joi_1.default.string().valid('COMPONENT').default('COMPONENT'),
        descendants: joi_1.default.array()
            .items(joi_1.default.custom(exports.validateComponent(styles, componentStyleMap, prefabType)))
            .required(),
        reconfigure: joi_1.default.any(),
        // lifecycle hooks
        $afterCreate: joi_1.default.array().items(joi_1.default.object({
            query: joi_1.default.string().valid('CreateAction').required(),
            input: joi_1.default.object().pattern(/./, joi_1.default.object({
                ref: joi_1.default.array().items(joi_1.default.string()),
            })),
            output: joi_1.default.object().pattern(/./, joi_1.default.object({
                ref: joi_1.default.array().items(joi_1.default.string()),
            })),
        })),
        $afterDelete: joi_1.default.array().items(joi_1.default.object({
            query: joi_1.default.string()
                .valid('DeleteAction', 'DeleteActionVariable', 'UpdateActionVariable')
                .required(),
            input: joi_1.default.object()
                .pattern(/./, joi_1.default.object({
                ref: joi_1.default.array().items(joi_1.default.string()),
            }))
                .required(),
        })),
        $onUpdate: joi_1.default.array().items(joi_1.default.object({
            query: joi_1.default.string()
                .valid('DeleteAction', 'DeleteActionVariable', 'UpdateActionVariable')
                .required(),
            input: joi_1.default.object()
                .pattern(/./, joi_1.default.object({
                ref: joi_1.default.array().items(joi_1.default.string()).required(),
            }))
                .required(),
        })),
    }).custom(validateComponentStyle(styles, deprecatedStylesFlag));
};
const findCategoryMemberDuplicates = (optionCategories, componentType) => {
    const memberKeys = optionCategories.reduce((acc, { members }) => {
        return [...acc, ...members];
    }, []);
    if (memberKeys.length !== new Set(memberKeys).size) {
        throw new Error(chalk_1.default.red(`\nBuild error in component ${componentType}: optionCategory members are required to be unique \n`));
    }
};
exports.validateComponent = (styles, componentStyleMap, prefabType) => (component) => {
    if (component.type === 'PARTIAL') {
        if (prefabType === 'partial') {
            throw new Error(chalk_1.default.red(`\n Partials are not supported in partial Prefabs\n`));
        }
        const { type } = component;
        const { error } = partialSchema().validate(component);
        if (typeof error !== 'undefined') {
            const { message } = error;
            throw new Error(chalk_1.default.red(`\nBuild error in component ${type}: ${message}\n`));
        }
    }
    else if (component.type === 'WRAPPER') {
        const { error } = wrapperSchema(styles, componentStyleMap, prefabType).validate(component);
        const { optionCategories = [], options } = component;
        validation_1.findDuplicates(options, 'option key', 'key');
        findCategoryMemberDuplicates(optionCategories, 'WRAPPER');
        if (typeof error !== 'undefined') {
            const { message } = error;
            throw new Error(chalk_1.default.red(`\nBuild error in component WRAPPER: ${message}\n`));
        }
    }
    else {
        const { name, optionCategories = [], options } = component;
        const styleType = componentStyleMap &&
            componentStyleMap[name] &&
            componentStyleMap[name].styleType;
        const { error } = componentSchema(styles, componentStyleMap, styleType, prefabType).validate(component);
        validation_1.findDuplicates(options, 'option key', 'key');
        findCategoryMemberDuplicates(optionCategories, 'component');
        if (typeof error !== 'undefined') {
            const { message } = error;
            throw new Error(chalk_1.default.red(`\nBuild error in component ${name}: ${message}\n`));
        }
    }
    return component;
};
//# sourceMappingURL=component.js.map