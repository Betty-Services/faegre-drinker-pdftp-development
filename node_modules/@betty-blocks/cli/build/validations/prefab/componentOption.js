"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const constants_1 = require("../constants");
const refSchema = joi_1.default.when('type', {
    is: 'ACTION',
    then: joi_1.default.object({
        value: joi_1.default.string().required(),
    }).when('value', {
        not: joi_1.default.exist(),
        then: joi_1.default.required(),
    }),
    otherwise: joi_1.default.object({ id: joi_1.default.string() }),
});
const optionConditionSchema = joi_1.default.object({
    type: joi_1.default.string().valid(...constants_1.CONDITION_TYPE),
    option: joi_1.default.string(),
    comparator: joi_1.default.string().valid(...constants_1.COMPARATORS),
    value: joi_1.default.any(),
});
const optionConfigurationSchemaBase = {
    apiVersion: joi_1.default.string()
        .pattern(/^v[\d]{1,}/)
        .default('v1'),
    allowedInput: joi_1.default.array().items(joi_1.default.object({
        name: joi_1.default.string().allow(''),
        value: joi_1.default.alternatives().try(joi_1.default.boolean(), joi_1.default.string(), joi_1.default.number()),
    })),
    allowedTypes: joi_1.default.array().items(joi_1.default.string()),
    allowRelations: joi_1.default.boolean(),
    as: joi_1.default.string().valid(...constants_1.CONFIGURATION_AS),
    component: joi_1.default.string(),
    condition: optionConditionSchema,
    disabled: joi_1.default.boolean(),
    dataType: joi_1.default.string(),
    dependsOn: joi_1.default.string(),
    placeholder: joi_1.default.string(),
    modal: joi_1.default.object({
        type: joi_1.default.string().valid(...constants_1.MODAL_TYPE),
        generateCustomModel: joi_1.default.boolean(),
        modelRequired: joi_1.default.boolean(),
    }),
};
const optionConfigurationSchema = joi_1.default.when('type', {
    is: 'PROPERTY',
    then: joi_1.default.object(Object.assign(Object.assign({}, optionConfigurationSchemaBase), { apiVersion: joi_1.default.string()
            .pattern(/^v[\d]{1,}/)
            .invalid('v1')
            .default('v2')
            .messages({
            'any.invalid': 'API version 1 is no longer supported.',
        }) })),
    otherwise: joi_1.default.object(optionConfigurationSchemaBase),
})
    .when('type', {
    is: 'PUBLIC_FILE',
    then: joi_1.default.object(Object.assign(Object.assign({}, optionConfigurationSchemaBase), { mediaType: joi_1.default.string().valid(...constants_1.MEDIA_TYPES), allowedExtensions: joi_1.default.alternatives().conditional('mediaType', {
            is: 'VIDEO',
            then: joi_1.default.array().items(joi_1.default.string().regex(/(^video)(\/)[a-zA-Z0-9_]*/m)),
            otherwise: joi_1.default.array().items(joi_1.default.string().regex(/(^image)(\/)[a-zA-Z0-9_]*/m)),
        }) })),
})
    .default({});
exports.optionSchema = joi_1.default.object({
    label: joi_1.default.string().required(),
    key: joi_1.default.string().required(),
    type: joi_1.default.string()
        .valid(...constants_1.OPTIONS)
        .required(),
    configuration: optionConfigurationSchema,
    value: joi_1.default.when('ref', {
        is: joi_1.default.object({ value: joi_1.default.exist() }).exist(),
        then: joi_1.default.forbidden(),
        otherwise: joi_1.default.any(),
    }),
    ref: refSchema,
});
exports.optionCategorySchema = joi_1.default.object({
    label: joi_1.default.string().required(),
    expanded: joi_1.default.boolean(),
    members: joi_1.default.array().items(joi_1.default.string()).min(1).required(),
    condition: optionConditionSchema,
});
//# sourceMappingURL=componentOption.js.map