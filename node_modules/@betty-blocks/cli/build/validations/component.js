"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const joi_1 = __importDefault(require("joi"));
const validation_1 = require("../utils/validation");
const reservedTypes = (value) => {
    if (value === 'PARTIAL' || value === 'WRAPPER') {
        throw new Error(chalk_1.default.red(`\nBuild error in component \`${value}\` is a reserved keyword for type`));
    }
    return value;
};
const schema = (validStyleTypes) => {
    const validTypes = validStyleTypes.length === 0 ? ['BUTTON', 'TEXT'] : validStyleTypes;
    return joi_1.default.object({
        name: joi_1.default.string().required(),
        icon: joi_1.default.string(),
        category: joi_1.default.string(),
        $afterCreate: joi_1.default.object({
            query: joi_1.default.string().required(),
            input: joi_1.default.object().pattern(joi_1.default.string(), joi_1.default.any()).required(),
            output: joi_1.default.object().pattern(joi_1.default.string(), joi_1.default.object({
                ref: joi_1.default.string(),
            })),
        }),
        type: joi_1.default.string().required().custom(reservedTypes),
        allowedTypes: joi_1.default.array().items(joi_1.default.string()).required(),
        orientation: joi_1.default.string().required(),
        dependencies: joi_1.default.array().items(joi_1.default.object({
            label: joi_1.default.string().required(),
            package: joi_1.default.string()
                .pattern(/^[a-z]+:[^~)('!*]+(@[0-9.\-a-z]+)$/)
                .required(),
            imports: joi_1.default.array().items(joi_1.default.string().valid('*')).required(),
        })),
        functions: joi_1.default.array().items(joi_1.default.string()),
        triggers: joi_1.default.array().items(joi_1.default.string()),
        interactions: joi_1.default.object(),
        jsx: joi_1.default.any().required(),
        styles: joi_1.default.any().required(),
        styleType: joi_1.default.string().valid(...validTypes),
        transpiledJsx: joi_1.default.string(),
        transpiledStyles: joi_1.default.string(),
        reconfigure: joi_1.default.any(),
    });
};
const validate = (component, validStyleTypes) => {
    const { error } = schema(validStyleTypes).validate(component);
    if (typeof error !== 'undefined') {
        throw new Error(chalk_1.default.red(`\nProperty: ${error.message} at component: ${component.name}\n`));
    }
};
exports.default = (components, validStyleTypes) => {
    components.forEach((component) => {
        validate(component, validStyleTypes);
    });
    validation_1.findDuplicates(components, 'component', 'name');
};
//# sourceMappingURL=component.js.map